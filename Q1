#include <iostream>


// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};


class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }
        ListNode *prev = nullptr;
        ListNode *curr = head;
        ListNode *forward = nullptr;
        while (curr != nullptr) {
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
};


ListNode* createNode(int val) {
    return new ListNode(val);
}


void printList(ListNode* head) {
    ListNode* temp = head;
    while (temp != nullptr) {
        std::cout << temp->val << " ";
        temp = temp->next;
    }
    std::cout << std::endl;
}


ListNode* createLinkedList() {
    int n;
    std::cout << "Enter the number of nodes: ";
    std::cin >> n;


    if (n == 0) {
        return nullptr;
    }


    int value;
    std::cout << "Enter the value of node 1: ";
    std::cin >> value;
    ListNode* head = createNode(value);
    ListNode* tail = head;


    for (int i = 2; i <= n; ++i) {
        std::cout << "Enter the value of node " << i << ": ";
        std::cin >> value;
        tail->next = createNode(value);
        tail = tail->next;
    }


    return head;
}


int main() {
    ListNode* head = createLinkedList();


    std::cout << "Original List: ";
    printList(head);


    Solution solution;
    ListNode* reversedHead = solution.reverseList(head);


    std::cout << "Reversed List: ";
    printList(reversedHead);


    return 0;
}
