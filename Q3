#include <iostream>
#include <algorithm>
#include <climits>
#include <queue>


using namespace std;


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};


class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int maxSum = INT_MIN;
        maxGain(root, maxSum);
        return maxSum;
    }


private:
    int maxGain(TreeNode* node, int& maxSum) {
        if (node == nullptr) {
            return 0;
        }
        int l = max(maxGain(node->left, maxSum), 0);
        int r = max(maxGain(node->right, maxSum), 0);
        int pr = node->val + l + r;
        maxSum = max(maxSum, pr);
        return node->val + max(l, r);
    }
};


TreeNode* createNode(int val) {
    return new TreeNode(val);
}


TreeNode* inputTree() {
    int val;
    cout << "Enter the value for the root node: ";
    cin >> val;
    TreeNode* root = createNode(val);
    queue<TreeNode*> q;
    q.push(root);


    while (!q.empty()) {
        TreeNode* current = q.front();
        q.pop();


        cout << "Enter the left child of " << current->val << " (-1 for no child): ";
        cin >> val;
        if (val != -1) {
            current->left = createNode(val);
            q.push(current->left);
        }


        cout << "Enter the right child of " << current->val << " (-1 for no child): ";
        cin >> val;
        if (val != -1) {
            current->right = createNode(val);
            q.push(current->right);
        }
    }


    return root;
}


int main() {
    TreeNode* root = inputTree();
    Solution solution;
    int result = solution.maxPathSum(root);
    cout << "Maximum path sum: " << result << endl;
    return 0;
}

